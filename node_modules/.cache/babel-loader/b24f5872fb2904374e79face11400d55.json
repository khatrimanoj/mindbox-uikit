{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/ChipsTags/draggableChips.js\";\nimport React from 'react';\nimport Icon from 'react-icons-kit';\nimport avtar1 from '../../images/avtar1.png';\nimport { x } from 'react-icons-kit/feather/x'; //drag and drop code start\n\nconst initialDnDState = {\n  draggedFrom: null,\n  draggedTo: null,\n  isDragging: false,\n  originalOrder: [],\n  updatedOrder: []\n};\n\nconst TagsInputDraggable = props => {\n  const [tags, setTags] = React.useState(props.tags);\n\n  const removeTags = indexToRemove => {\n    setTags([...tags.filter((_, index) => index !== indexToRemove)]);\n  };\n\n  const addTags = event => {\n    if (event.target.value !== \"\") {\n      setTags([...tags, event.target.value]);\n      props.selectedTags([...tags, event.target.value]);\n      event.target.value = \"\";\n    }\n  }; //drag and drop code start\n\n\n  const [dragAndDrop, setDragAndDrop] = React.useState(initialDnDState);\n\n  const onDragStart = event => {\n    const initialPosition = Number(event.currentTarget.dataset.position);\n    setDragAndDrop({ ...dragAndDrop,\n      draggedFrom: initialPosition,\n      isDragging: true,\n      originalOrder: tags\n    });\n    event.dataTransfer.setData(\"text/html\", '');\n  };\n\n  const onDragOver = event => {\n    event.preventDefault();\n    let tags = dragAndDrop.originalOrder; // index of the item being dragged\n\n    const draggedFrom = dragAndDrop.draggedFrom; // index of the droppable area being hovered\n\n    const draggedTo = Number(event.currentTarget.dataset.position);\n    const itemDragged = tags[draggedFrom];\n    const remainingItems = tags.filter((item, index) => index !== draggedFrom);\n    tags = [...remainingItems.slice(0, draggedTo), itemDragged, ...remainingItems.slice(draggedTo)];\n\n    if (draggedTo !== dragAndDrop.draggedTo) {\n      setDragAndDrop({ ...dragAndDrop,\n        updatedOrder: tags,\n        draggedTo: draggedTo\n      });\n    }\n  };\n\n  const onDrop = event => {\n    setTags(dragAndDrop.updatedOrder);\n    setDragAndDrop({ ...dragAndDrop,\n      draggedFrom: null,\n      draggedTo: null,\n      isDragging: false\n    });\n  };\n\n  const onDragLeave = () => {\n    setDragAndDrop({ ...dragAndDrop,\n      draggedTo: null\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"tags-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"tags\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"To\"), tags.map((tag, index) => React.createElement(\"li\", {\n    key: index,\n    \"data-position\": index,\n    draggable: true,\n    onDragStart: onDragStart,\n    onDragOver: onDragOver,\n    onDrop: onDrop,\n    onDragLeave: onDragLeave,\n    className: dragAndDrop && dragAndDrop.draggedTo === Number(index) ? \"tag draggable\" : `tag`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: avtar1,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"tag-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, tag), React.createElement(\"span\", {\n    className: \"tag-close-icon\",\n    onClick: () => removeTags(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: x,\n    size: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }))))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onKeyUp: event => event.key === \"Enter\" ? addTags(event) : null,\n    placeholder: \"Add contact\",\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"tags-input md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"tags\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"To\"), tags.map((tag, index) => React.createElement(\"li\", {\n    key: index,\n    \"data-position\": index,\n    draggable: true,\n    onDragStart: onDragStart,\n    onDragOver: onDragOver,\n    onDrop: onDrop,\n    onDragLeave: onDragLeave,\n    className: dragAndDrop && dragAndDrop.draggedTo === Number(index) ? \"tag draggable\" : `tag`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: avtar1,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"tag-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, tag), React.createElement(\"span\", {\n    className: \"tag-close-icon\",\n    onClick: () => removeTags(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: x,\n    size: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }))))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onKeyUp: event => event.key === \"Enter\" ? addTags(event) : null,\n    placeholder: \"Add contact\",\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"tags-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"tags\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"To\"), tags.map((tag, index) => React.createElement(\"li\", {\n    key: index,\n    \"data-position\": index,\n    draggable: true,\n    onDragStart: onDragStart,\n    onDragOver: onDragOver,\n    onDrop: onDrop,\n    onDragLeave: onDragLeave,\n    className: dragAndDrop && dragAndDrop.draggedTo === Number(index) ? \"tag draggable\" : `tag`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: avtar1,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"tag-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, tag), React.createElement(\"span\", {\n    className: \"tag-close-icon\",\n    onClick: () => removeTags(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: x,\n    size: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }))))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onKeyUp: event => event.key === \"Enter\" ? addTags(event) : null,\n    placeholder: \"Add contact\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"tags-input md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"tags\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"To\"), tags.map((tag, index) => React.createElement(\"li\", {\n    key: index,\n    \"data-position\": index,\n    draggable: true,\n    onDragStart: onDragStart,\n    onDragOver: onDragOver,\n    onDrop: onDrop,\n    onDragLeave: onDragLeave,\n    className: dragAndDrop && dragAndDrop.draggedTo === Number(index) ? \"tag draggable\" : `tag`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: avtar1,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"tag-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, tag), React.createElement(\"span\", {\n    className: \"tag-close-icon\",\n    onClick: () => removeTags(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: x,\n    size: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }))))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onKeyUp: event => event.key === \"Enter\" ? addTags(event) : null,\n    placeholder: \"Add contact\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }))))));\n};\n\nexport default TagsInputDraggable;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/ChipsTags/draggableChips.js"],"names":["React","Icon","avtar1","x","initialDnDState","draggedFrom","draggedTo","isDragging","originalOrder","updatedOrder","TagsInputDraggable","props","tags","setTags","useState","removeTags","indexToRemove","filter","_","index","addTags","event","target","value","selectedTags","dragAndDrop","setDragAndDrop","onDragStart","initialPosition","Number","currentTarget","dataset","position","dataTransfer","setData","onDragOver","preventDefault","itemDragged","remainingItems","item","slice","onDrop","onDragLeave","map","tag","key"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,CAAT,QAAkB,2BAAlB,C,CACA;;AACA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,WAAW,EAAE,IADO;AAEpBC,EAAAA,SAAS,EAAE,IAFS;AAGpBC,EAAAA,UAAU,EAAE,KAHQ;AAIpBC,EAAAA,aAAa,EAAE,EAJK;AAKpBC,EAAAA,YAAY,EAAE;AALM,CAAxB;;AAQA,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,KAAK,CAACc,QAAN,CAAeH,KAAK,CAACC,IAArB,CAAxB;;AACA,QAAMG,UAAU,GAAGC,aAAa,IAAI;AACnCH,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAI,CAACK,MAAL,CAAY,CAACC,CAAD,EAAIC,KAAJ,KAAcA,KAAK,KAAKH,aAApC,CAAJ,CAAD,CAAP;AACA,GAFD;;AAGA,QAAMI,OAAO,GAAGC,KAAK,IAAI;AACxB,QAAIA,KAAK,CAACC,MAAN,CAAaC,KAAb,KAAuB,EAA3B,EAA+B;AAC9BV,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUS,KAAK,CAACC,MAAN,CAAaC,KAAvB,CAAD,CAAP;AACAZ,MAAAA,KAAK,CAACa,YAAN,CAAmB,CAAC,GAAGZ,IAAJ,EAAUS,KAAK,CAACC,MAAN,CAAaC,KAAvB,CAAnB;AACAF,MAAAA,KAAK,CAACC,MAAN,CAAaC,KAAb,GAAqB,EAArB;AACA;AACE,GANJ,CALmC,CAahC;;;AACA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgC1B,KAAK,CAACc,QAAN,CAAeV,eAAf,CAAtC;;AACA,QAAMuB,WAAW,GAAIN,KAAD,IAAW;AAC3B,UAAMO,eAAe,GAAGC,MAAM,CAACR,KAAK,CAACS,aAAN,CAAoBC,OAApB,CAA4BC,QAA7B,CAA9B;AAEAN,IAAAA,cAAc,CAAC,EACX,GAAGD,WADQ;AAEXpB,MAAAA,WAAW,EAAEuB,eAFF;AAGXrB,MAAAA,UAAU,EAAE,IAHD;AAIXC,MAAAA,aAAa,EAAEI;AAJJ,KAAD,CAAd;AAQAS,IAAAA,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2B,WAA3B,EAAwC,EAAxC;AACH,GAZD;;AAcA,QAAMC,UAAU,GAAId,KAAD,IAAW;AAE1BA,IAAAA,KAAK,CAACe,cAAN;AAEA,QAAIxB,IAAI,GAAGa,WAAW,CAACjB,aAAvB,CAJ0B,CAM1B;;AACA,UAAMH,WAAW,GAAGoB,WAAW,CAACpB,WAAhC,CAP0B,CAS1B;;AACA,UAAMC,SAAS,GAAGuB,MAAM,CAACR,KAAK,CAACS,aAAN,CAAoBC,OAApB,CAA4BC,QAA7B,CAAxB;AAEA,UAAMK,WAAW,GAAGzB,IAAI,CAACP,WAAD,CAAxB;AACA,UAAMiC,cAAc,GAAG1B,IAAI,CAACK,MAAL,CAAY,CAACsB,IAAD,EAAOpB,KAAP,KAAiBA,KAAK,KAAKd,WAAvC,CAAvB;AAEAO,IAAAA,IAAI,GAAG,CACH,GAAG0B,cAAc,CAACE,KAAf,CAAqB,CAArB,EAAwBlC,SAAxB,CADA,EAEH+B,WAFG,EAGH,GAAGC,cAAc,CAACE,KAAf,CAAqBlC,SAArB,CAHA,CAAP;;AAMA,QAAIA,SAAS,KAAKmB,WAAW,CAACnB,SAA9B,EAAwC;AACpCoB,MAAAA,cAAc,CAAC,EACX,GAAGD,WADQ;AAEXhB,QAAAA,YAAY,EAAEG,IAFH;AAGXN,QAAAA,SAAS,EAAEA;AAHA,OAAD,CAAd;AAKH;AAEJ,GA7BD;;AA+BA,QAAMmC,MAAM,GAAIpB,KAAD,IAAW;AAEtBR,IAAAA,OAAO,CAACY,WAAW,CAAChB,YAAb,CAAP;AAEAiB,IAAAA,cAAc,CAAC,EACX,GAAGD,WADQ;AAEXpB,MAAAA,WAAW,EAAE,IAFF;AAGXC,MAAAA,SAAS,EAAE,IAHA;AAIXC,MAAAA,UAAU,EAAE;AAJD,KAAD,CAAd;AAMH,GAVD;;AAaA,QAAMmC,WAAW,GAAG,MAAM;AACtBhB,IAAAA,cAAc,CAAC,EACX,GAAGD,WADQ;AAEXnB,MAAAA,SAAS,EAAE;AAFA,KAAD,CAAd;AAKH,GAND;;AASA,SACI,0CACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEKM,IAAI,CAAC+B,GAAL,CAAS,CAACC,GAAD,EAAMzB,KAAN,KACN;AAAI,IAAA,GAAG,EAAEA,KAAT;AACI,qBAAeA,KADnB;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,WAAW,EAAEQ,WAHjB;AAII,IAAA,UAAU,EAAEQ,UAJhB;AAKI,IAAA,MAAM,EAAEM,MALZ;AAMI,IAAA,WAAW,EAAEC,WANjB;AAOI,IAAA,SAAS,EAAEjB,WAAW,IAAIA,WAAW,CAACnB,SAAZ,KAAyBuB,MAAM,CAACV,KAAD,CAA9C,GAAwD,eAAxD,GAA4E,KAP3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQI;AAAK,IAAA,GAAG,EAAEjB,MAAV;AAAkB,IAAA,GAAG,EAAC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6B0C,GAA7B,CATJ,EAUI;AAAM,IAAA,SAAS,EAAC,gBAAhB;AACI,IAAA,OAAO,EAAE,MAAM7B,UAAU,CAACI,KAAD,CAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEhB,CAAZ;AAAe,IAAA,IAAI,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAVJ,CADH,CAFL,CADJ,EAsBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,OAAO,EAAEkB,KAAK,IAAIA,KAAK,CAACwB,GAAN,KAAc,OAAd,GAAwBzB,OAAO,CAACC,KAAD,CAA/B,GAAyC,IAF/D;AAGI,IAAA,WAAW,EAAC,aAHhB;AAG8B,IAAA,SAAS,MAHvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAtBJ,CADJ,EA+BI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEKT,IAAI,CAAC+B,GAAL,CAAS,CAACC,GAAD,EAAMzB,KAAN,KACN;AAAI,IAAA,GAAG,EAAEA,KAAT;AACI,qBAAeA,KADnB;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,WAAW,EAAEQ,WAHjB;AAII,IAAA,UAAU,EAAEQ,UAJhB;AAKI,IAAA,MAAM,EAAEM,MALZ;AAMI,IAAA,WAAW,EAAEC,WANjB;AAOI,IAAA,SAAS,EAAEjB,WAAW,IAAIA,WAAW,CAACnB,SAAZ,KAAyBuB,MAAM,CAACV,KAAD,CAA9C,GAAwD,eAAxD,GAA4E,KAP3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQI;AAAK,IAAA,GAAG,EAAEjB,MAAV;AAAkB,IAAA,GAAG,EAAC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6B0C,GAA7B,CATJ,EAUI;AAAM,IAAA,SAAS,EAAC,gBAAhB;AACI,IAAA,OAAO,EAAE,MAAM7B,UAAU,CAACI,KAAD,CAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEhB,CAAZ;AAAe,IAAA,IAAI,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAVJ,CADH,CAFL,CADJ,EAsBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,OAAO,EAAEkB,KAAK,IAAIA,KAAK,CAACwB,GAAN,KAAc,OAAd,GAAwBzB,OAAO,CAACC,KAAD,CAA/B,GAAyC,IAF/D;AAGI,IAAA,WAAW,EAAC,aAHhB;AAG8B,IAAA,SAAS,MAHvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAtBJ,CA/BJ,CADJ,EA+DI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEKT,IAAI,CAAC+B,GAAL,CAAS,CAACC,GAAD,EAAMzB,KAAN,KACN;AAAI,IAAA,GAAG,EAAEA,KAAT;AACI,qBAAeA,KADnB;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,WAAW,EAAEQ,WAHjB;AAII,IAAA,UAAU,EAAEQ,UAJhB;AAKI,IAAA,MAAM,EAAEM,MALZ;AAMI,IAAA,WAAW,EAAEC,WANjB;AAOI,IAAA,SAAS,EAAEjB,WAAW,IAAIA,WAAW,CAACnB,SAAZ,KAAyBuB,MAAM,CAACV,KAAD,CAA9C,GAAwD,eAAxD,GAA4E,KAP3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQI;AAAK,IAAA,GAAG,EAAEjB,MAAV;AAAkB,IAAA,GAAG,EAAC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6B0C,GAA7B,CATJ,EAUI;AAAM,IAAA,SAAS,EAAC,gBAAhB;AACI,IAAA,OAAO,EAAE,MAAM7B,UAAU,CAACI,KAAD,CAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEhB,CAAZ;AAAe,IAAA,IAAI,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAVJ,CADH,CAFL,CADJ,EAsBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,OAAO,EAAEkB,KAAK,IAAIA,KAAK,CAACwB,GAAN,KAAc,OAAd,GAAwBzB,OAAO,CAACC,KAAD,CAA/B,GAAyC,IAF/D;AAGI,IAAA,WAAW,EAAC,aAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAtBJ,CADJ,EA+BI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEKT,IAAI,CAAC+B,GAAL,CAAS,CAACC,GAAD,EAAMzB,KAAN,KACN;AAAI,IAAA,GAAG,EAAEA,KAAT;AACI,qBAAeA,KADnB;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,WAAW,EAAEQ,WAHjB;AAII,IAAA,UAAU,EAAEQ,UAJhB;AAKI,IAAA,MAAM,EAAEM,MALZ;AAMI,IAAA,WAAW,EAAEC,WANjB;AAOI,IAAA,SAAS,EAAEjB,WAAW,IAAIA,WAAW,CAACnB,SAAZ,KAAyBuB,MAAM,CAACV,KAAD,CAA9C,GAAwD,eAAxD,GAA4E,KAP3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQI;AAAK,IAAA,GAAG,EAAEjB,MAAV;AAAkB,IAAA,GAAG,EAAC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6B0C,GAA7B,CATJ,EAUI;AAAM,IAAA,SAAS,EAAC,gBAAhB;AACI,IAAA,OAAO,EAAE,MAAM7B,UAAU,CAACI,KAAD,CAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEhB,CAAZ;AAAe,IAAA,IAAI,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAVJ,CADH,CAFL,CADJ,EAsBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,OAAO,EAAEkB,KAAK,IAAIA,KAAK,CAACwB,GAAN,KAAc,OAAd,GAAwBzB,OAAO,CAACC,KAAD,CAA/B,GAAyC,IAF/D;AAGI,IAAA,WAAW,EAAC,aAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAtBJ,CA/BJ,CA/DJ,CADJ,CADJ;AAkIC,CApNL;;AAsNI,eAAeX,kBAAf","sourcesContent":["import React from 'react';\nimport Icon from 'react-icons-kit';\nimport avtar1 from '../../images/avtar1.png';\nimport { x } from 'react-icons-kit/feather/x';\n//drag and drop code start\nconst initialDnDState = {\n    draggedFrom: null,\n    draggedTo: null,\n    isDragging: false,\n    originalOrder: [],\n    updatedOrder: []\n}\n\nconst TagsInputDraggable = props => {\n\tconst [tags, setTags] = React.useState(props.tags);\n\tconst removeTags = indexToRemove => {\n\t\tsetTags([...tags.filter((_, index) => index !== indexToRemove)]);\n\t};\n\tconst addTags = event => {\n\t\tif (event.target.value !== \"\") {\n\t\t\tsetTags([...tags, event.target.value]);\n\t\t\tprops.selectedTags([...tags, event.target.value]);\n\t\t\tevent.target.value = \"\";\n\t\t}\n    };\n\n    //drag and drop code start\n    const [dragAndDrop, setDragAndDrop] = React.useState(initialDnDState);\n    const onDragStart = (event) => {\n        const initialPosition = Number(event.currentTarget.dataset.position);\n        \n        setDragAndDrop({\n            ...dragAndDrop,\n            draggedFrom: initialPosition,\n            isDragging: true,\n            originalOrder: tags\n        });\n        \n        \n        event.dataTransfer.setData(\"text/html\", '');\n    }\n    \n    const onDragOver = (event) => {\n    \n        event.preventDefault();\n        \n        let tags = dragAndDrop.originalOrder;\n        \n        // index of the item being dragged\n        const draggedFrom = dragAndDrop.draggedFrom; \n\n        // index of the droppable area being hovered\n        const draggedTo = Number(event.currentTarget.dataset.position); \n\n        const itemDragged = tags[draggedFrom];\n        const remainingItems = tags.filter((item, index) => index !== draggedFrom);\n\n        tags = [\n            ...remainingItems.slice(0, draggedTo),\n            itemDragged,\n            ...remainingItems.slice(draggedTo)\n        ];\n            \n        if (draggedTo !== dragAndDrop.draggedTo){\n            setDragAndDrop({\n                ...dragAndDrop,\n                updatedOrder: tags,\n                draggedTo: draggedTo\n            })\n        }\n\n    }\n    \n    const onDrop = (event) => {\n    \n        setTags(dragAndDrop.updatedOrder);\n        \n        setDragAndDrop({\n            ...dragAndDrop,\n            draggedFrom: null,\n            draggedTo: null,\n            isDragging: false\n        });\n    }\n\n\n    const onDragLeave = () => {\n        setDragAndDrop({\n            ...dragAndDrop,\n            draggedTo: null\n        });\n    \n    }\n    \n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <div className=\"tags-input\">\n                        <ul className=\"tags\">\n                            <li className=\"to\">To</li>\n                            {tags.map((tag, index) => (\n                                <li key={index}\n                                    data-position={index}\n                                    draggable\n                                    onDragStart={onDragStart}\n                                    onDragOver={onDragOver}\n                                    onDrop={onDrop}\n                                    onDragLeave={onDragLeave}\n                                    className={dragAndDrop && dragAndDrop.draggedTo=== Number(index) ? \"tag draggable\" :  `tag`}>\n                                    <img src={avtar1} alt=\"avatar\"/>\n                                    <span className='tag-title'>{tag}</span>\n                                    <span className='tag-close-icon'\n                                        onClick={() => removeTags(index)}\n                                    >\n                                        <Icon icon={x} size={16} />\n                                    </span>\n                                </li>\n                            ))}\n                        </ul>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                onKeyUp={event => event.key === \"Enter\" ? addTags(event) : null}\n                                placeholder=\"Add contact\" autoFocus\n                            />\n                        </div>\n                    </div>\n                    <div className=\"tags-input md\">\n                        <ul className=\"tags\">\n                            <li className=\"to\">To</li>\n                            {tags.map((tag, index) => (\n                                <li key={index}\n                                    data-position={index}\n                                    draggable\n                                    onDragStart={onDragStart}\n                                    onDragOver={onDragOver}\n                                    onDrop={onDrop}\n                                    onDragLeave={onDragLeave}\n                                    className={dragAndDrop && dragAndDrop.draggedTo=== Number(index) ? \"tag draggable\" :  `tag`}>\n                                    <img src={avtar1} alt=\"avatar\"/>\n                                    <span className='tag-title'>{tag}</span>\n                                    <span className='tag-close-icon'\n                                        onClick={() => removeTags(index)}\n                                    >\n                                        <Icon icon={x} size={16} />\n                                    </span>\n                                </li>\n                            ))}\n                        </ul>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                onKeyUp={event => event.key === \"Enter\" ? addTags(event) : null}\n                                placeholder=\"Add contact\" autoFocus\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-6\">\n                    <div className=\"tags-input\">\n                        <ul className=\"tags\">\n                            <li className=\"to\">To</li>\n                            {tags.map((tag, index) => (\n                                <li key={index}\n                                    data-position={index}\n                                    draggable\n                                    onDragStart={onDragStart}\n                                    onDragOver={onDragOver}\n                                    onDrop={onDrop}\n                                    onDragLeave={onDragLeave}\n                                    className={dragAndDrop && dragAndDrop.draggedTo=== Number(index) ? \"tag draggable\" :  `tag`}>\n                                    <img src={avtar1} alt=\"avatar\"/>\n                                    <span className='tag-title'>{tag}</span>\n                                    <span className='tag-close-icon'\n                                        onClick={() => removeTags(index)}\n                                    >\n                                        <Icon icon={x} size={16} />\n                                    </span>\n                                </li>\n                            ))}\n                        </ul>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                onKeyUp={event => event.key === \"Enter\" ? addTags(event) : null}\n                                placeholder=\"Add contact\"\n                            />\n                        </div>\n                    </div>\n                    <div className=\"tags-input md\">\n                        <ul className=\"tags\">\n                            <li className=\"to\">To</li>\n                            {tags.map((tag, index) => (\n                                <li key={index}\n                                    data-position={index}\n                                    draggable\n                                    onDragStart={onDragStart}\n                                    onDragOver={onDragOver}\n                                    onDrop={onDrop}\n                                    onDragLeave={onDragLeave}\n                                    className={dragAndDrop && dragAndDrop.draggedTo=== Number(index) ? \"tag draggable\" :  `tag`}>\n                                    <img src={avtar1} alt=\"avatar\"/>\n                                    <span className='tag-title'>{tag}</span>\n                                    <span className='tag-close-icon'\n                                        onClick={() => removeTags(index)}\n                                    >\n                                        <Icon icon={x} size={16} />\n                                    </span>\n                                </li>\n                            ))}\n                        </ul>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                onKeyUp={event => event.key === \"Enter\" ? addTags(event) : null}\n                                placeholder=\"Add contact\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\t\t</>\n\t);\n    };\n    \n    export default TagsInputDraggable;\n"]},"metadata":{},"sourceType":"module"}